from collections import defaultdict


class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def addEdge(self, origin, destination):
        # add edge to graph
        self.graph[origin].append(destination)

    def DFSUtil(self, visited, vertex):
        visited[vertex] = True
        print(vertex, end=' ')

        for i in self.graph[vertex]:
            if not visited[i]:
                self.DFSUtil(visited, i)

    def DFS(self, start_vertex):
        visited = [False] * (max(self.graph) + 1)
        self.DFSUtil(visited, start_vertex)


g = Graph()
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(1, 2)
g.addEdge(2, 0)
g.addEdge(2, 3)
g.addEdge(3, 3)
print()
print("Following is DFS from (starting from vertex 2)")
g.DFS(2)
